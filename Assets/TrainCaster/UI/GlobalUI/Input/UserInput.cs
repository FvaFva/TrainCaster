//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/UI/GlobalUI/Input/UserInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInput"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""34fd3a0d-dc3c-41d6-bb3e-26320e5980e3"",
            ""actions"": [
                {
                    ""name"": ""ChangeWagon"",
                    ""type"": ""Value"",
                    ""id"": ""d749cca5-bc29-4712-9475-31e8b231c102"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateCamera"",
                    ""type"": ""Button"",
                    ""id"": ""3d1a4c3b-cbaf-4114-a7a9-490e1d5f514a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""438016b5-a728-4639-ab89-373afb911a82"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeWagon"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2363b5fc-3873-4e1a-a93c-8c03a2e83b0d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse Keyboard"",
                    ""action"": ""ChangeWagon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""904414b2-953d-4002-a0af-9f44e49c2f53"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse Keyboard"",
                    ""action"": ""ChangeWagon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c422bafe-966b-4e0e-924f-11e832818228"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse Keyboard"",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cast"",
            ""id"": ""4d57938d-58d9-4ad9-96c4-6aa0e5564856"",
            ""actions"": [
                {
                    ""name"": ""CastSkillA"",
                    ""type"": ""Button"",
                    ""id"": ""5e42ab79-0731-42f9-a80a-75a9a68168c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CastSkillB"",
                    ""type"": ""Button"",
                    ""id"": ""400f9a6c-295e-42ba-abf8-5efc330f8325"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChosedSkill1"",
                    ""type"": ""Button"",
                    ""id"": ""efd5a075-9a3a-4fcd-81fd-b3b8a7476aa8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChosedSkill2"",
                    ""type"": ""Button"",
                    ""id"": ""0688e9bb-8ab4-4ced-a17d-7cb9d133f133"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChosedSkill3"",
                    ""type"": ""Button"",
                    ""id"": ""99b0a353-95d0-472c-af22-fd5646c6eec3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7aeb11b5-7090-4865-a7b9-fecced3e70e7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse Keyboard"",
                    ""action"": ""CastSkillA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f53a8be-98c2-4bff-b209-c5f6c36d7bc3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse Keyboard"",
                    ""action"": ""CastSkillB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34fe1131-e951-4282-88b6-c8973f81deab"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse Keyboard"",
                    ""action"": ""ChosedSkill1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93350457-bba7-4207-b35a-a4353aa8b74d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse Keyboard"",
                    ""action"": ""ChosedSkill2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e873d6a-6049-44c9-9b53-98af54a77cca"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse Keyboard"",
                    ""action"": ""ChosedSkill3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Craft"",
            ""id"": ""1ee9c36d-3ece-4362-ad7d-a898b12f3829"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c4eaff0f-2b06-4df1-8ba9-a113c3892b23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aa4ae7f5-6cee-492a-9217-d66d91a21607"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse Keyboard"",
            ""bindingGroup"": ""Mouse Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_ChangeWagon = m_Movement.FindAction("ChangeWagon", throwIfNotFound: true);
        m_Movement_RotateCamera = m_Movement.FindAction("RotateCamera", throwIfNotFound: true);
        // Cast
        m_Cast = asset.FindActionMap("Cast", throwIfNotFound: true);
        m_Cast_CastSkillA = m_Cast.FindAction("CastSkillA", throwIfNotFound: true);
        m_Cast_CastSkillB = m_Cast.FindAction("CastSkillB", throwIfNotFound: true);
        m_Cast_ChosedSkill1 = m_Cast.FindAction("ChosedSkill1", throwIfNotFound: true);
        m_Cast_ChosedSkill2 = m_Cast.FindAction("ChosedSkill2", throwIfNotFound: true);
        m_Cast_ChosedSkill3 = m_Cast.FindAction("ChosedSkill3", throwIfNotFound: true);
        // Craft
        m_Craft = asset.FindActionMap("Craft", throwIfNotFound: true);
        m_Craft_Interact = m_Craft.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_ChangeWagon;
    private readonly InputAction m_Movement_RotateCamera;
    public struct MovementActions
    {
        private @UserInput m_Wrapper;
        public MovementActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeWagon => m_Wrapper.m_Movement_ChangeWagon;
        public InputAction @RotateCamera => m_Wrapper.m_Movement_RotateCamera;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @ChangeWagon.started += instance.OnChangeWagon;
            @ChangeWagon.performed += instance.OnChangeWagon;
            @ChangeWagon.canceled += instance.OnChangeWagon;
            @RotateCamera.started += instance.OnRotateCamera;
            @RotateCamera.performed += instance.OnRotateCamera;
            @RotateCamera.canceled += instance.OnRotateCamera;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @ChangeWagon.started -= instance.OnChangeWagon;
            @ChangeWagon.performed -= instance.OnChangeWagon;
            @ChangeWagon.canceled -= instance.OnChangeWagon;
            @RotateCamera.started -= instance.OnRotateCamera;
            @RotateCamera.performed -= instance.OnRotateCamera;
            @RotateCamera.canceled -= instance.OnRotateCamera;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Cast
    private readonly InputActionMap m_Cast;
    private List<ICastActions> m_CastActionsCallbackInterfaces = new List<ICastActions>();
    private readonly InputAction m_Cast_CastSkillA;
    private readonly InputAction m_Cast_CastSkillB;
    private readonly InputAction m_Cast_ChosedSkill1;
    private readonly InputAction m_Cast_ChosedSkill2;
    private readonly InputAction m_Cast_ChosedSkill3;
    public struct CastActions
    {
        private @UserInput m_Wrapper;
        public CastActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CastSkillA => m_Wrapper.m_Cast_CastSkillA;
        public InputAction @CastSkillB => m_Wrapper.m_Cast_CastSkillB;
        public InputAction @ChosedSkill1 => m_Wrapper.m_Cast_ChosedSkill1;
        public InputAction @ChosedSkill2 => m_Wrapper.m_Cast_ChosedSkill2;
        public InputAction @ChosedSkill3 => m_Wrapper.m_Cast_ChosedSkill3;
        public InputActionMap Get() { return m_Wrapper.m_Cast; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CastActions set) { return set.Get(); }
        public void AddCallbacks(ICastActions instance)
        {
            if (instance == null || m_Wrapper.m_CastActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CastActionsCallbackInterfaces.Add(instance);
            @CastSkillA.started += instance.OnCastSkillA;
            @CastSkillA.performed += instance.OnCastSkillA;
            @CastSkillA.canceled += instance.OnCastSkillA;
            @CastSkillB.started += instance.OnCastSkillB;
            @CastSkillB.performed += instance.OnCastSkillB;
            @CastSkillB.canceled += instance.OnCastSkillB;
            @ChosedSkill1.started += instance.OnChosedSkill1;
            @ChosedSkill1.performed += instance.OnChosedSkill1;
            @ChosedSkill1.canceled += instance.OnChosedSkill1;
            @ChosedSkill2.started += instance.OnChosedSkill2;
            @ChosedSkill2.performed += instance.OnChosedSkill2;
            @ChosedSkill2.canceled += instance.OnChosedSkill2;
            @ChosedSkill3.started += instance.OnChosedSkill3;
            @ChosedSkill3.performed += instance.OnChosedSkill3;
            @ChosedSkill3.canceled += instance.OnChosedSkill3;
        }

        private void UnregisterCallbacks(ICastActions instance)
        {
            @CastSkillA.started -= instance.OnCastSkillA;
            @CastSkillA.performed -= instance.OnCastSkillA;
            @CastSkillA.canceled -= instance.OnCastSkillA;
            @CastSkillB.started -= instance.OnCastSkillB;
            @CastSkillB.performed -= instance.OnCastSkillB;
            @CastSkillB.canceled -= instance.OnCastSkillB;
            @ChosedSkill1.started -= instance.OnChosedSkill1;
            @ChosedSkill1.performed -= instance.OnChosedSkill1;
            @ChosedSkill1.canceled -= instance.OnChosedSkill1;
            @ChosedSkill2.started -= instance.OnChosedSkill2;
            @ChosedSkill2.performed -= instance.OnChosedSkill2;
            @ChosedSkill2.canceled -= instance.OnChosedSkill2;
            @ChosedSkill3.started -= instance.OnChosedSkill3;
            @ChosedSkill3.performed -= instance.OnChosedSkill3;
            @ChosedSkill3.canceled -= instance.OnChosedSkill3;
        }

        public void RemoveCallbacks(ICastActions instance)
        {
            if (m_Wrapper.m_CastActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICastActions instance)
        {
            foreach (var item in m_Wrapper.m_CastActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CastActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CastActions @Cast => new CastActions(this);

    // Craft
    private readonly InputActionMap m_Craft;
    private List<ICraftActions> m_CraftActionsCallbackInterfaces = new List<ICraftActions>();
    private readonly InputAction m_Craft_Interact;
    public struct CraftActions
    {
        private @UserInput m_Wrapper;
        public CraftActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Craft_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Craft; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CraftActions set) { return set.Get(); }
        public void AddCallbacks(ICraftActions instance)
        {
            if (instance == null || m_Wrapper.m_CraftActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CraftActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(ICraftActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(ICraftActions instance)
        {
            if (m_Wrapper.m_CraftActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICraftActions instance)
        {
            foreach (var item in m_Wrapper.m_CraftActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CraftActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CraftActions @Craft => new CraftActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnChangeWagon(InputAction.CallbackContext context);
        void OnRotateCamera(InputAction.CallbackContext context);
    }
    public interface ICastActions
    {
        void OnCastSkillA(InputAction.CallbackContext context);
        void OnCastSkillB(InputAction.CallbackContext context);
        void OnChosedSkill1(InputAction.CallbackContext context);
        void OnChosedSkill2(InputAction.CallbackContext context);
        void OnChosedSkill3(InputAction.CallbackContext context);
    }
    public interface ICraftActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
}
